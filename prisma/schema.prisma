generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id Int @id @default(autoincrement())

  firstName String
  lastName  String
  addresses Address[]
  email     String    @unique
  phone     String    @unique
  password  String

  role UserRole @default(CUSTOMER)

  verificationCode VerificationCode[]
  verified         Boolean            @default(false)

  provider   String?
  providerId String?

  cart Cart?

  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int

  name    String
  comment String

  orders Order[]
}

model Category {
  id Int @id @default(autoincrement())

  name     String    @unique
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id Int @id @default(autoincrement())

  name     String
  imageUrl String

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])

  variants Variant[]

  ingredients Ingredient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Variant {
  id Int @id @default(autoincrement())

  sizeId Int?
  size   Size? @relation(fields: [sizeId], references: [id])

  doughId Int?
  dough   Dough? @relation(fields: [doughId], references: [id])

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  price Int

  cartItems CartItem[]
}

model Size {
  id Int @id @default(autoincrement())

  name  String @unique
  value Int

  variants Variant[]
}

model Dough {
  id Int @id @default(autoincrement())

  name  String @unique
  value String @unique

  variants Variant[]
}

model Ingredient {
  id Int @id @default(autoincrement())

  name     String @unique
  price    Int
  imageUrl String

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cartItems CartItem[]
}

model Cart {
  id Int @id @default(autoincrement())

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @unique

  cartItems CartItem[]

  token String @unique
  order Order?

  totalPrice Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id Int @id @default(autoincrement())

  variantId Int
  variant   Variant @relation(fields: [variantId], references: [id])

  ingredients Ingredient[]

  cartId Int
  cart   Cart @relation(fields: [cartId], references: [id])

  quantity Int

  createdAt DateTime @default(now())
}

model Order {
  id Int @id @default(autoincrement())

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  cart   Cart @relation(fields: [cartId], references: [id])
  cartId Int  @unique

  //  if user is authorized
  selectedAddress Address? @relation(fields: [addressId], references: [id])
  addressId       Int?

  status    OrderStatus @default(PENDING)
  paymentId String?

  // if user isn't authorized
  firstName String?
  lastName  String?
  email     String?
  phone     String?

  address String?
  comment String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationCode {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int

  value String @unique

  createdAt DateTime @default(now())
}

enum OrderStatus {
  PENDING
  SUCCEDED
  CANCELLED
}

enum UserRole {
  CUSTOMER
  ADMIN
}
